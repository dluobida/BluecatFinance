package com.dluobida.bluecat.finance.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dluobida.bluecat.finance.core.db.table.TransferData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSFER_DATA".
*/
public class TransferDataDao extends AbstractDao<TransferData, Long> {

    public static final String TABLENAME = "TRANSFER_DATA";

    /**
     * Properties of entity TransferData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, String.class, "date", false, "DATE");
        public final static Property Money = new Property(2, String.class, "money", false, "MONEY");
        public final static Property AccountOut = new Property(3, String.class, "accountOut", false, "ACCOUNT_OUT");
        public final static Property AccountIn = new Property(4, String.class, "accountIn", false, "ACCOUNT_IN");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
    }


    public TransferDataDao(DaoConfig config) {
        super(config);
    }
    
    public TransferDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSFER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" TEXT," + // 1: date
                "\"MONEY\" TEXT," + // 2: money
                "\"ACCOUNT_OUT\" TEXT," + // 3: accountOut
                "\"ACCOUNT_IN\" TEXT," + // 4: accountIn
                "\"REMARK\" TEXT);"); // 5: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSFER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransferData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(3, money);
        }
 
        String accountOut = entity.getAccountOut();
        if (accountOut != null) {
            stmt.bindString(4, accountOut);
        }
 
        String accountIn = entity.getAccountIn();
        if (accountIn != null) {
            stmt.bindString(5, accountIn);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransferData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(2, date);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(3, money);
        }
 
        String accountOut = entity.getAccountOut();
        if (accountOut != null) {
            stmt.bindString(4, accountOut);
        }
 
        String accountIn = entity.getAccountIn();
        if (accountIn != null) {
            stmt.bindString(5, accountIn);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransferData readEntity(Cursor cursor, int offset) {
        TransferData entity = new TransferData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // money
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accountOut
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // accountIn
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransferData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMoney(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccountOut(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccountIn(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransferData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransferData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransferData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
